services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    image: backend
    container_name: backend
    restart: always
    command: /bin/sh -c "sleep 5 &&
      venv/bin/python manage.py makemigrations --noinput &&
      venv/bin/python manage.py migrate --noinput && 
      venv/bin/python manage.py collectstatic --noinput &&
      venv/bin/daphne -b 0.0.0.0 -p 8080 pong.asgi:application"
    volumes:
      - pong:/transcendence/pong
    ports:
      - "8080:8080"
    networks:
      - app-network
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      - db
    healthcheck:
      test: ["CMD-SHELL", "curl", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  db:
    image: postgres:latest
    container_name: postgres
    restart: always
    volumes:
      - pong_pg_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: es01
    volumes:
      - pong_es_data_01:/usr/share/elasticsearch/data
    ports:
     - "9200:9200"
    networks:
     - app-network
    environment:
     - node.name=es01
     - cluster.name=${CLUSTER_NAME}
     - discovery.type=single-node
     - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
     - bootstrap.memory_lock=true
     - xpack.security.enabled=false
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"'"]
      interval: 10s
      timeout: 10s
      retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    container_name: kibana
    volumes:
      - pong_kibana:/usr/share/kibana/data
    user: "1000:1000"
    ports:
      - 5601:5601
    networks:
      - app-network
    environment:
      - SERVERNAME=pong.kibana.org
      - ELASTICSEARCH_HOSTS=http://es01:9200
      - ELASTICSEARCH_USERNAME=${ELASTIC_USERNAME}
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
    depends_on:
      - es01
    healthcheck:
      test: ["CMD-SHELL", "curl -s -I http://localhost:5601 | grep -q '200 OK'"]
      interval: 10s
      timeout: 20s
      retries: 200

    
  logstash01:
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    container_name: logstash01
    volumes:
      - ./config/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    ports:
      - "5044:5044"
    networks:
      - app-network
    environment:
      - ELASTIC_HOSTS=http://es01:9200
      - ELASTIC_USER=${ELASTIC_USERNAME}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - xpack.monitoring.enabled=false

volumes:
  pong:
    driver: local
    driver_opts:
      type: none
      device: ${PROJECT_PATH}
      o: bind
  pong_pg_data:
    driver: local
  pong_es_data_01:
    driver: local
  pong_kibana:
    driver: local

  

networks:
  app-network:
    driver: bridge
